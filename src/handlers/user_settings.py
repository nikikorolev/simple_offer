from loguru import logger
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.markups import get_inline_markup_for_select
from dao.dao import UserDAO, LocationDAO, SalaryDAO, SpecialityDAO, GradeDAO
from constants import LOCATION_CHOICES, GRADE_CHOICES, SPECIALTY_CHOICES, SALARY_CHOICES

router = Router()


class UserSettings(StatesGroup):
    locations = State()
    specialties = State()
    grades = State()
    salary = State()


@router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    await state.clear()
    await state.update_data(locations=[], specialties=[], grades=[], salary=[])
    await message.answer(
        "üì© *[1/4]* –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_inline_markup_for_select(
            LOCATION_CHOICES, [], back_button=False),
        parse_mode="Markdown"
    )
    await state.set_state(UserSettings.locations)
    logger.info(
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.locations –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


@router.callback_query(UserSettings.locations)
async def location_chosen(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ª–æ–∫–∞—Ü–∏—é: {callback.data}.")
    data = await state.get_data()
    selected_locations = data.get("locations", [])

    if callback.data == "clear":
        selected_locations.clear()
        await state.update_data(locations=selected_locations)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                LOCATION_CHOICES, selected_locations, back_button=False)
        )
        await callback.answer("üöÆ –õ–æ–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã.")
        logger.info(f"–õ–æ–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return

    if callback.data == "finish":
        if not selected_locations:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ª–æ–∫–∞—Ü–∏—é!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏.")
            return
        await callback.message.edit_text(
            "üì© *[2/4]* –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=get_inline_markup_for_select(SPECIALTY_CHOICES, []),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.specialties)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.specialties –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data in LOCATION_CHOICES:
        if callback.data in selected_locations:
            selected_locations.remove(callback.data)
            logger.info(
                f"–õ–æ–∫–∞—Ü–∏—è {callback.data} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            selected_locations.append(callback.data)
            logger.info(
                f"–õ–æ–∫–∞—Ü–∏—è {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        await state.update_data(locations=selected_locations)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                LOCATION_CHOICES, selected_locations, back_button=False)
        )
        await callback.answer()


@router.callback_query(UserSettings.specialties)
async def speciality_chosen(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {callback.data}.")
    data = await state.get_data()
    selected_specialities = data.get("specialties", [])

    if callback.data == "clear":
        selected_specialities.clear()
        await state.update_data(specialties=selected_specialities)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                SPECIALTY_CHOICES, selected_specialities)
        )
        await callback.answer("üöÆ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã.")
        logger.info(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return

    if callback.data == "back":
        await callback.message.edit_text(
            "üì© *[1/4]* –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å:",
            reply_markup=get_inline_markup_for_select(
                LOCATION_CHOICES, data.get("locations", []), back_button=False),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.locations)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.locations –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data == "finish":
        if not selected_specialities:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")
            return
        await callback.message.edit_text(
            "üì© *[3/4]* –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥:",
            reply_markup=get_inline_markup_for_select(GRADE_CHOICES, []),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.grades)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.grades –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data in SPECIALTY_CHOICES:
        if callback.data in selected_specialities:
            selected_specialities.remove(callback.data)
            logger.info(
                f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {callback.data} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            selected_specialities.append(callback.data)
            logger.info(
                f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        await state.update_data(specialties=selected_specialities)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                SPECIALTY_CHOICES, selected_specialities)
        )
        await callback.answer()


@router.callback_query(UserSettings.grades)
async def grade_chosen(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≥—Ä–µ–π–¥: {callback.data}.")
    data = await state.get_data()
    selected_grades = data.get("grades", [])

    if callback.data == "clear":
        selected_grades.clear()
        await state.update_data(grades=selected_grades)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                GRADE_CHOICES, selected_grades)
        )
        await callback.answer("üöÆ –ì—Ä–µ–π–¥—ã –æ—á–∏—â–µ–Ω—ã.")
        logger.info(f"–ì—Ä–µ–π–¥—ã –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return

    if callback.data == "back":
        await callback.message.edit_text(
            "üì© *[2/4]* –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
            reply_markup=get_inline_markup_for_select(
                SPECIALTY_CHOICES, data.get("specialties", [])),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.specialties)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.specialties –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data == "finish":
        if not selected_grades:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≥—Ä–µ–π–¥!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –≥—Ä–µ–π–¥–∞.")
            return
        await callback.message.edit_text(
            "üì© *[4/4]* –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã:",
            reply_markup=get_inline_markup_for_select(SALARY_CHOICES, []),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.salary)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.salary –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data in GRADE_CHOICES:
        if callback.data in selected_grades:
            selected_grades.remove(callback.data)
            logger.info(
                f"–ì—Ä–µ–π–¥ {callback.data} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            selected_grades.append(callback.data)
            logger.info(
                f"–ì—Ä–µ–π–¥ {callback.data} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        await state.update_data(grades=selected_grades)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                GRADE_CHOICES, selected_grades)
        )
        await callback.answer()


@router.callback_query(UserSettings.salary)
async def salary_chosen(callback: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∑–∞—Ä–ø–ª–∞—Ç—É: {callback.data}.")
    data = await state.get_data()
    selected_salary = data.get("salary", None)

    if callback.data == "clear":
        selected_salary = None
        await state.update_data(salary=selected_salary)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                SALARY_CHOICES, selected_salary)
        )
        await callback.answer("üöÆ –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—á–∏—â–µ–Ω.")
        logger.info(f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        return

    if callback.data == "back":
        await callback.message.edit_text(
            "üì© *[3/4]* –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–µ–π–¥:",
            reply_markup=get_inline_markup_for_select(
                GRADE_CHOICES, data.get("grades", [])),
            parse_mode="Markdown"
        )
        await state.set_state(UserSettings.grades)
        logger.info(
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ UserSettings.grades –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        await callback.answer()
        return

    if callback.data == "finish":
        if not selected_salary:
            await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã!")
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã.")
            return

        user_settings = await state.get_data()
        user_settings["salary"] = float(selected_salary[:-2]) * 1000

        try:
            user = await UserDAO.get_or_add(session_with_commit, values={
                "telegram_id": user_id})
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            await LocationDAO.delete(session_with_commit, filter={
                "user_id": user.telegram_id})
            locations = [{"user_id": user.telegram_id, "location": location}
                         for location in user_settings["locations"]]
            for location in locations:
                await LocationDAO.add(session_with_commit, values=location)

            await GradeDAO.delete(session_with_commit, filter={
                "user_id": user.telegram_id})
            grades = [{"user_id": user.telegram_id, "grade": grade}
                      for grade in user_settings["grades"]]
            for grade in grades:
                await GradeDAO.add(session_with_commit, values=grade)

            await SpecialityDAO.delete(session_with_commit, filter={
                "user_id": user.telegram_id})
            specialties = [{"user_id": user.telegram_id, "speciality": speciality}
                           for speciality in user_settings["specialties"]]
            for speciality in specialties:
                await SpecialityDAO.add(session_with_commit, values=speciality)

            await SalaryDAO.delete(session_with_commit, filter={
                "user_id": user.telegram_id})
            await SalaryDAO.add(session_with_commit, values={"user_id": user.telegram_id, "salary": user_settings["salary"]})

            result = (
                f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
                f"üåç –õ–æ–∫–∞—Ü–∏–∏: {', '.join(user_settings['locations'])}\n"
                f"üíº –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {', '.join(user_settings['specialties'])}\n"
                f"üìà –ì—Ä–µ–π–¥—ã: {', '.join(user_settings['grades'])}\n"
                f"üí∞ –£—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–ø–ª–∞—Ç—ã: –±–æ–ª–µ–µ {int(user_settings['salary'])} —Ä—É–±–ª–µ–π\n"
            )
            await callback.message.edit_text(result, parse_mode="Markdown")
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except ValueError as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        except Exception as e:
            await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")

        await state.clear()
        await callback.answer()
        return

    if callback.data in SALARY_CHOICES:
        selected_salary = callback.data

        await state.update_data(salary=selected_salary)
        await callback.message.edit_reply_markup(
            reply_markup=get_inline_markup_for_select(
                SALARY_CHOICES, [selected_salary])
        )
        await callback.answer()
        logger.info(
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞ {selected_salary} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
