from loguru import logger
import asyncio
from typing import List, Dict, Optional, Tuple
from aiogram import Bot
from sqlalchemy.ext.asyncio import AsyncSession

from collectors.headhunter import HeadhunterVacanciesParser
from params_generators.headhunter import ParamsGeneratorHeadhunter
from database.dao import (
    UserDAO, SentVacanciesHeadhunterDAO
)
from database.database import Session
from database.services import UserSettingsServices
from database.models import (
    User, Location, Salary,
    Grade, Speciality
)
from keyboards.markups import get_inline_markup_send_vacancy
from handlers.utils import clean_text_from_html


class VacanciesFinder:
    """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ —á–∞—Ç."""

    def __init__(self, session: AsyncSession, telegram_id: str) -> None:
        """
        Args:
            session (AsyncSession): –°–µ—Å—Å–∏—è SQLAlchemy.
            telegram_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        """
        self.session = session
        self.telegram_id = telegram_id
        if not self.telegram_id:
            raise ValueError("telegram_id –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

    async def _get_user_settings(self) -> Tuple[List[Location], List[Speciality], List[Grade], Optional[Salary]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ telegram_id.

        Returns:
            Tuple[List[Location], List[Speciality], List[Grade], Optional[Salary]]: 
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ Location, Speciality, Grade –∏ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ Salary (–º–æ–∂–µ—Ç –±—ã—Ç—å None).
        """
        return await UserSettingsServices(self.session).get_user_settings_by_telegram_id(self.telegram_id)

    async def _get_last_message_date_headhunter(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

        Returns:
            Optional[str]: –î–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç.
        """
        return await SentVacanciesHeadhunterDAO.get_last_date_by_telegram_id(
            self.session, self.telegram_id
        )

    async def _get_listed_data_from_user_settings_and_last_date_headhunter(self) -> Tuple[List[str], List[str], List[str], int, Optional[str]]:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞: –ª–æ–∫–∞—Ü–∏–∏, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –≥—Ä–µ–π–¥—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞, –¥–∞—Ç–∞.

        Returns:
            Tuple[List[str], List[str], List[str], int, Optional[str]]:
                - –°–ø–∏—Å–∫–∏ –ª–æ–∫–∞—Ü–∏–π, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π, –≥—Ä–µ–π–¥–æ–≤,
                - –ó–∞—Ä–ø–ª–∞—Ç–∞ (int),
                - –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (str –∏–ª–∏ None).
        """
        locations, specialities, grades, salary = await self._get_user_settings()
        locations = [obj.location for obj in locations]
        grades = [obj.grade for obj in grades]
        specialities = [obj.speciality for obj in specialities]
        salary_value = int(salary.salary) if salary else 0
        date = await self._get_last_message_date_headhunter()
        return locations, specialities, grades, salary_value, date

    async def _generate_params_headhunter(self) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è HeadHunter.

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        try:
            logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
            locations, specialities, grades, salary, date = await self._get_listed_data_from_user_settings_and_last_date_headhunter()
            headhunter_params = [
                ParamsGeneratorHeadhunter().get_params(
                    locations, specialities, grade, salary, date)
                for grade in grades
            ]
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {len(headhunter_params)}")
            return headhunter_params
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            raise

    async def find_vacancies_headhunter(self) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –ø–æ–º–æ—â—å—é HeadHunter.

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        headhunter_params = await self._generate_params_headhunter()
        vacancies = []
        for params in headhunter_params:
            parser = HeadhunterVacanciesParser(params=params)
            vacancies_part = await parser.get_all_vacancies()
            if vacancies_part:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies_part)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {params}")
                vacancies.extend(vacancies_part)
        return vacancies

    async def find_vacancies(self) -> List[Dict]:
        """
        –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.

        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        return await self.find_vacancies_headhunter()


class VacanciesSender:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º Telegram."""

    def __init__(self, bot: Bot, max_concurrent_users: int = 20):
        """
        Args:
            bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞.
            max_concurrent_users (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        """
        self.bot = bot
        self.semaphore = asyncio.Semaphore(max_concurrent_users)

    async def is_vacancy_sending(self, session: AsyncSession, vacancy_id: str, telegram_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Args:
            session (AsyncSession): –°–µ—Å—Å–∏—è SQLAlchemy.
            vacancy_id (str): ID –≤–∞–∫–∞–Ω—Å–∏–∏.
            telegram_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            bool: True, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å, –∏–Ω–∞—á–µ False.
        """
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
            filter_ = {"user_id": telegram_id, "vacancy_id": vacancy_id}
            vacancy = await SentVacanciesHeadhunterDAO.get_last_record(session, filter_)
            if vacancy:
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return True
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            raise

    @staticmethod
    def generate_message_for_vacancy(vacancy: Dict) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏.

        Args:
            vacancy (Dict): –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.

        Returns:
            str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if vacancy['salary_from'] and vacancy['salary_to']:
            salary_string = f"{vacancy['salary_from']} - {vacancy['salary_to']} {vacancy['salary_currency']}"
        elif vacancy['salary_from']:
            salary_string = f"{vacancy['salary_from']} {vacancy['salary_currency']}"
        elif vacancy['salary_to']:
            salary_string = f"{vacancy['salary_to']} {vacancy['salary_currency']}"
        else:
            salary_string = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        return (
            f"*{vacancy['name']}* @ *{vacancy['employer']}*\n\n"
            f"üí∞ {salary_string}\n"
            f"üìç {vacancy['location']}\n\n"
            f"–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: {clean_text_from_html(vacancy['description'])}\n\n"
            f"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {clean_text_from_html(vacancy['responsibility'])}"
        )

    async def vacancy_sending(self, vacancy: Dict, telegram_id: int) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.

        Args:
            vacancy (Dict): –í–∞–∫–∞–Ω—Å–∏—è.
            telegram_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            None
        """
        try:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy['id']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            message = self.generate_message_for_vacancy(vacancy)
            await self.bot.send_message(
                telegram_id,
                message,
                reply_markup=get_inline_markup_send_vacancy(vacancy['link']),
                parse_mode="Markdown"
            )
            logger.info(
                f"–í–∞–∫–∞–Ω—Å–∏—è {vacancy['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            raise

    async def vacancy_saving(self, session: AsyncSession, vacancy: Dict, telegram_id: int) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.

        Args:
            session (AsyncSession): –°–µ—Å—Å–∏—è SQLAlchemy.
            vacancy (Dict): –í–∞–∫–∞–Ω—Å–∏—è.
            telegram_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Returns:
            None
        """
        values = {"user_id": telegram_id, "vacancy_id": str(vacancy['id'])}
        await SentVacanciesHeadhunterDAO.add(session, values)

    async def process_user(self, session: AsyncSession, user: User, timeout: int = 30) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π.

        Args:
            session (AsyncSession): –°–µ—Å—Å–∏—è SQLAlchemy.
            user (User): –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            timeout (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.

        Returns:
            None
        """
        telegram_id = user.telegram_id
        async with self.semaphore:
            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                vacancies = await asyncio.wait_for(
                    VacanciesFinder(session, telegram_id).find_vacancies(),
                    timeout=timeout
                )
                for vacancy in vacancies:
                    if not await self.is_vacancy_sending(session, vacancy["id"], telegram_id):
                        await asyncio.wait_for(self.vacancy_sending(vacancy, telegram_id), timeout=10)
                        await self.vacancy_saving(session, vacancy, telegram_id)
                        await asyncio.sleep(0.5)
            except asyncio.TimeoutError:
                logger.warning(
                    f"Timeout –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")

    async def start_sending(self, sleep_time: int = 10) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

        Args:
            sleep_time (int): –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫).

        Returns:
            None
        """
        while True:
            async with Session() as session:
                try:
                    users = await UserDAO.find_all(session, {})
                    logger.info(
                        f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                    tasks = [self.process_user(session, user)
                             for user in users]
                    await asyncio.gather(*tasks)
                    await session.commit()
                except Exception as e:
                    logger.error(
                        f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
                finally:
                    await session.close()
                    logger.info("–°–µ—Å—Å–∏—è sender –∑–∞–∫—Ä—ã—Ç–∞")
            await asyncio.sleep(sleep_time)
