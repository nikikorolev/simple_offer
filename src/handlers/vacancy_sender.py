from loguru import logger
import asyncio
from typing import List, Dict, Optional

from collectors.headhunter import HeadhunterVacanciesParser
from params_generators.headhunter import ParamsGeneratorHeadhunter
from dao.dao import UserDAO, LocationDAO, SalaryDAO, SpecialityDAO, GradeDAO, SentVacanciesHeadhunterDAO
from dao.database import Session
from keyboards.markups import get_inline_markup_send_vacancy
from handlers.utils import clean_text_from_html


class Sender:
    def __init__(self, bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ Sender –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        self.bot = bot

    async def get_settings_objects_by_telegram_id(self, session, telegram_id: int) -> tuple:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π.
        """
        try:
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {telegram_id}")
            filter = {"user_id": telegram_id}
            locations = await LocationDAO.find_all(session, filter)
            grades = await GradeDAO.find_all(session, filter)
            specialities = await SpecialityDAO.find_all(session, filter)
            salary = await SalaryDAO.find_one_or_none(session, filter)
            logger.info(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {telegram_id}")
            return locations, grades, specialities, salary
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {telegram_id}: {e}")
            raise

    async def get_last_date(self, session, salary, telegram_id: int) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {telegram_id}")
            filter = {"user_id": telegram_id}
            last_record = await SentVacanciesHeadhunterDAO.get_last_record(session, filter)
            if not last_record:
                date = salary.updated_at
                logger.info(
                    f"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {date}")
            else:
                date = last_record.updated_at
                logger.info(
                    f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {date}")
            return date
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {telegram_id}: {e}")
            raise

    def get_params_to_response(self, locations: List[object], specialities: List[object], grades: List[object], salary: object, date: str) -> List[dict]:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
            locations = [object.location for object in locations]
            grades = [object.grade for object in grades]
            specialities = [object.speciality for object in specialities]
            salary = int(salary.salary)
            params_list = []
            for grade in grades:
                params = ParamsGeneratorHeadhunter().get_params(
                    locations, specialities, grade, salary, date)
                params_list.append(params)
            logger.info(
                f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã: {len(params_list)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return params_list
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
            raise

    async def vacancies_parsing(self, session, telegram_id: int) -> List[Dict[str, Optional[str]]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
        """
        locations, grades, specialities, salary = await self.get_settings_objects_by_telegram_id(session, telegram_id)
        date = await self.get_last_date(session, salary, telegram_id)
        params_list = self.get_params_to_response(
            locations, specialities, grades, salary, date)

        vacancies = []
        for params in params_list:
            parser = HeadhunterVacanciesParser(params=params)
            vacancies_part = await parser.get_all_vacancies()
            if vacancies_part:
                logger.info(
                    f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies_part)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: {params}")
                vacancies.extend(vacancies_part)
        return vacancies

    async def is_vacancy_sending(self, session, vacancy_id: str, telegram_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}")
            filter = {"user_id": telegram_id, "vacancy_id": vacancy_id}
            vacancy = await SentVacanciesHeadhunterDAO().get_last_record(session, filter)
            if vacancy:
                logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return True
            logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è {vacancy_id} –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            raise

    async def vacancy_sending(self, vacancy: dict, telegram_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram.
        """
        try:
            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ {vacancy['id']} –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
            if vacancy['salary_from'] and vacancy['salary_to']:
                salary_string = f"{vacancy['salary_from']} - {vacancy['salary_to']} {vacancy['salary_currency']}"
            elif vacancy['salary_from']:
                salary_string = f"{vacancy['salary_from']} {vacancy['salary_currency']}"
            elif vacancy['salary_to']:
                salary_string = f"{vacancy['salary_to']} {vacancy['salary_currency']}"
            else:
                salary_string = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            message = (f"*{vacancy['name']}* @ *{vacancy['employer']}*\n\n"
                       f"üí∞ {salary_string}\n"
                       f"üìç {vacancy['location']}\n\n"
                       f"–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏: {clean_text_from_html(vacancy['description'])}\n\n"
                       f"–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {clean_text_from_html(vacancy['responsibility'])}")
            await self.bot.send_message(telegram_id, message,
                                        reply_markup=get_inline_markup_send_vacancy(
                                            vacancy['link']),
                                        parse_mode="Markdown")
            logger.info(f"–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {e}")
            raise

    async def vacancy_saving(self, session, vacancy: dict, telegram_id: int):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        values = {"user_id": telegram_id, "vacancy_id": vacancy['id']}
        await SentVacanciesHeadhunterDAO.add(session, values)

    async def start_sending(self, sleep_time: int = 10):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        """
        while True:
            async with Session() as session:
                try:
                    users = await UserDAO.find_all(session, {})
                    for user in users:
                        telegram_id = user.telegram_id
                        vacancies = await self.vacancies_parsing(session, telegram_id)
                        if vacancies:
                            for vacancy in vacancies:
                                is_sending = await self.is_vacancy_sending(session, vacancy["id"], telegram_id)
                                if not is_sending:
                                    await self.vacancy_sending(vacancy, telegram_id)
                                    await self.vacancy_saving(session, vacancy, telegram_id)
                    await session.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
                finally:
                    await session.close()
                    logger.info("–°–µ—Å—Å–∏—è –¥–ª—è sender –∑–∞–∫—Ä—ã—Ç–∞.")
            await asyncio.sleep(sleep_time)
